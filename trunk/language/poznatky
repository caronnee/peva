- ked volam funkciu, viem o tom z toho, ze je tam zavorka a nejake parametre, takze mi na to staci ina struktura nez Node, to znamena iba vyhladavanie podla mena a cislo na stacku. tot bude fungovat dobre aj v pripade kradnutia kodu aj skodenia kodu - pridavanie novych instrukcii, tym sa ale rozhodi stack, takze sa to bude musiet spravit pre vsetky funkcie
- MUSIM si vytvarat stromy aby som vedela, ze mam vytvorit ake premene s akym menom.
- V okamihy volania funkcie prekopirujem ten strom -> stane sa nanajvys raz za dlhu dobu(pokial nepretecie velkost stromu)
- co sa tyka kopirovania poli, najskor musim vytvorit NODE a potom sa ho pokusit registrovat do stromu
- pole sa vytvori tak, ze mam typ CREATION_type a tam je povedane, co sa z coho vytvara. Vytvara sa to az v okamihu, ked je znamy cely typ (nesmie byt udefined)
Create_type nemoze byt v progreme, pretoze by program musel narabat konkretne s jej premennymi -> nehodi sa

STrom!
Vyzera tak, ze mame globalne premenne ulozene od korena, funkcie a ich premenne su spravene tak, ze premenna funkcie je meno_funkcie.meno_premennej, aj tak sa to pouzije iba pri bisonovani, v instrukcii sa potom ulozi adresa toho node, kde je kopa tych premennych

MEMORY!
kopa miesta, ktore sa da vyuzit, v okamihu, ked pretecie, tak nastanu nepredvidatelne nasledky:) priradi sa mi iny Node, najblizsi mozny a tak pod.
Mame v instrukcii odkaz na kontejner vsetkych nodov, v okamihu, ako z funkcie vylezieme, sa mi ten node ulozi to 'volnych', ktore este mozem niekomiu priradzovat. Zostane pritom v kontajneri. Akonahle je premenna znovu deklarovana, potom sa jej priradi znova dalsi node
